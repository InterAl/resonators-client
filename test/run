#!/usr/bin/env node

initBabel();

const childProcess = require('child_process');
const createServer = require('./createServer').default;
const nightmare = require('./nightmare');
const readline = require('readline');

let testProcess;

let serverOptions = {
    showServerLogs: false
};

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

createServer(serverOptions)
    .then(killTestProcess)
    .then(() => {
        testProcess = runTest();
        return testProcess;
    })
    .then(() => {
        repl();
    });

function repl() {
    rl.question('> ', cmd => {
        executeCommand(cmd);
        repl();
    });
}

function executeCommand(cmd) {
    switch (cmd) {
        case 'restart':
            console.log('restarting test');
            testProcess.kill('SIGINT');
            runTest();
            break;
        case 'show server':
            console.log('showing server logs');
            serverOptions.showServerLogs = true;
            break;
        case 'hide server':
            console.log('hiding server logs');
            serverOptions.showServerLogs = false;
            break;
        default:
            console.log('unknown command');
            break;
    }
}

function killTestProcess() {
    return childProcess.execSync('sudo pgrep -f jest | xargs kill -9');
}

function runTest() {
    const args = process.argv.slice(2);
    const argsTxt = args.join(' ');

    testProcess = childProcess.spawn('jest', args, {
        stdio: [null, process.stdout, process.stderr]
    });

    return testProcess;
}

function initBabel() {
    require('./setup');
}

(function wait () {
   if (true) setTimeout(wait, 1000);
})();
